<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  

  
  <title>static关键字 | Hexo</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <meta name="description" content="static、final等关键字感觉这对于初级码农来说，是一个世界性的难题，我也不知道对它的理解如何，总之，现在仍是云里雾里，过段时间看看JVM吧，总之，不想做一名只会增删改查的程序员，就要不断地学习。 1、static变量按照是否静态的对类成员变量进行分类可分两种：一种是被static修饰的变量，叫静态变量或类变量；另一种是没有被static修饰的变量，叫实例变量。两者的区别是：对于静态变量在内">
<meta property="og:type" content="article">
<meta property="og:title" content="static关键字">
<meta property="og:url" content="http:&#x2F;&#x2F;huwj.work&#x2F;java&#x2F;static%E5%85%B3%E9%94%AE%E5%AD%97">
<meta property="og:site_name" content="Hexo">
<meta property="og:description" content="static、final等关键字感觉这对于初级码农来说，是一个世界性的难题，我也不知道对它的理解如何，总之，现在仍是云里雾里，过段时间看看JVM吧，总之，不想做一名只会增删改查的程序员，就要不断地学习。 1、static变量按照是否静态的对类成员变量进行分类可分两种：一种是被static修饰的变量，叫静态变量或类变量；另一种是没有被static修饰的变量，叫实例变量。两者的区别是：对于静态变量在内">
<meta property="og:locale" content="en">
<meta property="og:image" content="http:&#x2F;&#x2F;huwj.work&#x2F;images&#x2F;java&#x2F;static&#x2F;1.png">
<meta property="og:image" content="http:&#x2F;&#x2F;huwj.work&#x2F;images&#x2F;java&#x2F;static&#x2F;0.png">
<meta property="og:image" content="http:&#x2F;&#x2F;huwj.work&#x2F;images&#x2F;java&#x2F;static&#x2F;1.png">
<meta property="og:image" content="http:&#x2F;&#x2F;huwj.work&#x2F;images&#x2F;java&#x2F;static&#x2F;2.png">
<meta property="og:updated_time" content="2018-10-10T06:46:50.000Z">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="http:&#x2F;&#x2F;huwj.work&#x2F;images&#x2F;java&#x2F;static&#x2F;1.png">
  
    <link rel="alternate" href="/atom.xml" title="Hexo" type="application/atom+xml">
  
  
    <link rel="icon" href="/favicon.png">
  
  
    <link href="//fonts.googleapis.com/css?family=Source+Code+Pro" rel="stylesheet" type="text/css">
  
  <link rel="stylesheet" href="/css/style.css">
</head>

<body>
  <div id="container">
    <div id="wrap">
      <header id="header">
  <div id="banner"></div>
  <div id="header-outer" class="outer">
    <div id="header-title" class="inner">
      <h1 id="logo-wrap">
        <a href="/" id="logo">Hexo</a>
      </h1>
      
    </div>
    <div id="header-inner" class="inner">
      <nav id="main-nav">
        <a id="main-nav-toggle" class="nav-icon"></a>
        
          <a class="main-nav-link" href="/">Home</a>
        
          <a class="main-nav-link" href="/archives">Archives</a>
        
      </nav>
      <nav id="sub-nav">
        
          <a id="nav-rss-link" class="nav-icon" href="/atom.xml" title="RSS Feed"></a>
        
        <a id="nav-search-btn" class="nav-icon" title="Search"></a>
      </nav>
      <div id="search-form-wrap">
        <form action="//google.com/search" method="get" accept-charset="UTF-8" class="search-form"><input type="search" name="q" class="search-form-input" placeholder="Search"><button type="submit" class="search-form-submit">&#xF002;</button><input type="hidden" name="sitesearch" value="http://huwj.work"></form>
      </div>
    </div>
  </div>
</header>
      <div class="outer">
        <section id="main"><article id="post-static关键字" class="article article-type-post" itemscope itemprop="blogPost">
  <div class="article-meta">
    <a href="/java/static%E5%85%B3%E9%94%AE%E5%AD%97" class="article-date">
  <time datetime="2018-09-21T02:20:00.000Z" itemprop="datePublished">2018-09-21</time>
</a>
    
  <div class="article-category">
    <a class="article-category-link" href="/categories/java/">java</a>
  </div>

  </div>
  <div class="article-inner">
    
    
      <header class="article-header">
        
  
    <h1 class="article-title" itemprop="name">
      static关键字
    </h1>
  

      </header>
    
    <div class="article-entry" itemprop="articleBody">
      
        <p>static、final等关键字感觉这对于初级码农来说，是一个世界性的难题，我也不知道对它的理解如何，总之，现在仍是云里雾里，过段时间看看JVM吧，总之，不想做一名只会增删改查的程序员，就要不断地学习。</p>
<h2 id="1、static变量"><a href="#1、static变量" class="headerlink" title="1、static变量"></a>1、static变量</h2><p>按照是否静态的对类成员变量进行分类可分两种：一种是被static修饰的变量，叫静态变量或类变量；另一种是没有被static修饰的变量，叫实例变量。<br><br>两者的区别是：<br><br>对于静态变量在内存中只有一个拷贝（节省内存），JVM只为静态分配一次内存，在加载类的过程中完成静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问（但是这是不推荐的）。<br><br>对于实例变量，每创建一个实例，就会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互不影响（灵活）。<br><br>所以一般在需要实现以下两个功能时使用静态变量：<br><br>1).在对象之间共享值时<br><br>2).方便访问变量时<br></p>
<h2 id="2、静态方法"><a href="#2、静态方法" class="headerlink" title="2、静态方法"></a>2、静态方法</h2><p>静态方法可以直接通过类名调用，任何的实例也都可以调用<br></p>
<p>因此静态方法中不能用this和super关键字，不能直接访问所属类的实例变量和实例方法(就是不带static的成员变量和成员成员方法)，只能访问所属类的静态成员变量和成员方法。</p>
<p>因为实例成员与特定的对象关联！这个需要去理解，想明白其中的道理，不是记忆！！！</p>
<p>因为static方法独立于任何实例，因此static方法必须被实现，而不能是抽象的abstract。</p>
<p>例如为了方便方法的调用，Java API中的Math类中所有的方法都是静态的，而一般类内部的static方法也是方便其它类对该方法的调用。</p>
<p>静态方法是类内部的一类特殊方法，只有在需要时才将对应的方法声明成静态的，一个类内部的方法一般都是非静态的。</p>
<h2 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h2><p>static代码块也叫静态代码块，是在类中独立于类成员的static语句块，可以有多个，位置可以随便放，它不在任何的方法体内，JVM加载类时会执行这些静态的代码块，如果static代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。<br><img src="/images/java/static/1.png" alt="Alt text"></p>
<p><strong>综上：简言之，静态变量为共享的，静态方法可以直接被类名调用，静态代码块依次没虚拟机初始化。</strong></p>
<h2 id="static和final一块用"><a href="#static和final一块用" class="headerlink" title="static和final一块用"></a>static和final一块用</h2><p>static final用来修饰成员变量和成员方法，可简单理解为“<strong>全局常量</strong>”！</p>
<p>对于变量，表示一旦给值就不可修改，并且通过类名可以访问。</p>
<p>对于方法，表示不可覆盖，并且可以通过类名直接访问。</p>
<p>有时你希望定义一个类成员，使它的使用完全独立于该类的任何对象。通常情况下，类成员必须通过它的类的对象访问，但是可以创建这样一个成员，它能够被它自己使用，而不必引用特定的实例。在成员的声明前面加上关键字static(静态的)就能创建这样的成员。如果一个成员被声明为static，它就能够在它的类的任何对象创建之前被访问，而不必引用任何对象。<strong>你可以将方法和变量都声明为static。static 成员的最常见的例子是main( ) 。因为在程序开始执行时必须调用main() ，所以它被声明为static。</strong></p>
<p><strong>声明为static的变量实质上就是全局变量</strong>。当声明一个对象时，并不产生static变量的拷贝，而是该类所有的实例变量共用同一个static变量。声明为static的方法有以下几条限制：</p>
<p>1).它们仅能调用其他的static 方法。</p>
<p>2).它们只能访问static数据。</p>
<p>3).它们不能以任何方式引用this 或super</p>
<p>如果你需要通过计算来初始化你的static变量，你可以声明一个static块，Static 块仅在该类被加载时执行一次。下面的例子显示的类有一个static方法，一些static变量，以及一个static 初始化块：<br><img src="/images/java/static/0.png" alt="Alt text"></p>
<p>一旦UseStatic 类被装载，所有的static语句被运行。首先，a被设置为3，接着static 块执行(打印一条消息)，最后，b被初始化为a*4 或12。然后调用main()，main() 调用meth() ，把值42传递给x。3个println ( ) 语句引用两个static变量a和b，以及局部变量x 。<br><img src="/images/java/static/1.png" alt="Alt text"></p>
<p><strong>注意：在一个static 方法中引用任何实例变量都是非法的。</strong></p>
<p>在定义它们的类的外面，<strong>static 方法和变量能独立于任何对象而被使用。</strong>这样，你只要在类的名字后面加点号运算符即可。例如，如果你希望从类外面调用一个static方法，你可以使用下面通用的格式：<br><strong>classname.method( )</strong></p>
<p>这里，classname 是类的名字，在该类中定义static方法。可以看到，这种格式与通过对象引用变量调用非static方法的格式类似。一个static变量可以以同样的格式来访问——类名加点号运算符。这就是Java 如何实现全局功能和全局变量的一个控制版本。<br><img src="/images/java/static/2.png" alt="Alt text"></p>
<p>**<br>如果不加static修饰的成员是对象成员，也就是归每个对象所有的。</p>
<p>加static修饰的成员是类成员，就是可以由一个类直接调用，为所有对象共有的。**</p>
<h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>在java中，经常希望某个变量可以在一个类中的多个方法是用，通常将这些敞亮成为类常量。可以使用static final设置一个类常量。<br><br><strong>需要注意的是：类常量的定位于main方法的外部，因此在同一个类的其他方法也可以使用这个常量，若这个常量被声明为public，那么其他类的方法也可以使用这个常量。</strong></p>

      
    </div>
    <footer class="article-footer">
      <a data-url="http://huwj.work/java/static%E5%85%B3%E9%94%AE%E5%AD%97" data-id="ck3gl3nt50019vkezhynthv7m" class="article-share-link">Share</a>
      
      
    </footer>
  </div>
  
    
<nav id="article-nav">
  
    <a href="/uncategorized/%E6%AD%BB%E9%94%81" id="article-nav-newer" class="article-nav-link-wrap">
      <strong class="article-nav-caption">Newer</strong>
      <div class="article-nav-title">
        
          死锁
        
      </div>
    </a>
  
  
    <a href="/java/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F" id="article-nav-older" class="article-nav-link-wrap">
      <strong class="article-nav-caption">Older</strong>
      <div class="article-nav-title">单例设计模式</div>
    </a>
  
</nav>

  
</article>

</section>
        
          <aside id="sidebar">
  
    
  <div class="widget-wrap">
    <h3 class="widget-title">Categories</h3>
    <div class="widget">
      <ul class="category-list"><li class="category-list-item"><a class="category-list-link" href="/categories/AR/">AR</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/HTML/">HTML</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/book/">book</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/css/">css</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/java/">java</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/js/">js</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/office/">office</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/python/">python</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/spring/">spring</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/">云计算</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E5%8D%9A%E5%AE%A2/">博客</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E7%82%B9%E6%BB%B4%E7%94%9F%E6%B4%BB/">点滴生活</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/">神经网络</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E7%AE%97%E6%B3%95/">算法</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/">计算机网络</a></li></ul>
    </div>
  </div>


  
    

  
    
  
    
  <div class="widget-wrap">
    <h3 class="widget-title">Archives</h3>
    <div class="widget">
      <ul class="archive-list"><li class="archive-list-item"><a class="archive-list-link" href="/archives/2018/11/">November 2018</a></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2018/10/">October 2018</a></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2018/09/">September 2018</a></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2018/08/">August 2018</a></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2018/07/">July 2018</a></li></ul>
    </div>
  </div>


  
    
  <div class="widget-wrap">
    <h3 class="widget-title">Recent Posts</h3>
    <div class="widget">
      <ul>
        
          <li>
            <a href="/%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD%E5%AD%90%E5%BA%8F%E5%88%97%E4%B9%8B%E5%92%8C">最大连续子序列之和</a>
          </li>
        
          <li>
            <a href="/spring/spring-aop-1">spring_aop_代码实现</a>
          </li>
        
          <li>
            <a href="/spring/spring-aop">spring_aop</a>
          </li>
        
          <li>
            <a href="/spring/spring1">spring_DI</a>
          </li>
        
          <li>
            <a href="/java/leetcode">leetcode</a>
          </li>
        
      </ul>
    </div>
  </div>

  
</aside>
        
      </div>
      <footer id="footer">
  
  <div class="outer">
    <div id="footer-info" class="inner">
      &copy; 2019 John Doe<br>
      Powered by <a href="http://hexo.io/" target="_blank">Hexo</a>
    </div>
  </div>
</footer>
    </div>
    <nav id="mobile-nav">
  
    <a href="/" class="mobile-nav-link">Home</a>
  
    <a href="/archives" class="mobile-nav-link">Archives</a>
  
</nav>
    

<script src="//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>


  <link rel="stylesheet" href="/fancybox/jquery.fancybox.css">
  <script src="/fancybox/jquery.fancybox.pack.js"></script>


<script src="/js/script.js"></script>



  </div>
</body>
</html>
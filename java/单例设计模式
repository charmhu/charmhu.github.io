<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  

  
  <title>单例设计模式 | Hexo</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <meta name="description" content="单例设计模式定义定义：保证一个类仅有一个实例，并提供一个访问它的全局访问点。Java中单例模式定义：“一个类有且仅有一个实例，并且自行实例化向整个系统提供。”通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如果希望在系统中某个类的对象只能存在一个，单例模式是最好的解决方案。所谓一山不容二虎，一夫不容二妻，就是这个道理。 public cl">
<meta property="og:type" content="article">
<meta property="og:title" content="单例设计模式">
<meta property="og:url" content="http:&#x2F;&#x2F;huwj.work&#x2F;java&#x2F;%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F">
<meta property="og:site_name" content="Hexo">
<meta property="og:description" content="单例设计模式定义定义：保证一个类仅有一个实例，并提供一个访问它的全局访问点。Java中单例模式定义：“一个类有且仅有一个实例，并且自行实例化向整个系统提供。”通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如果希望在系统中某个类的对象只能存在一个，单例模式是最好的解决方案。所谓一山不容二虎，一夫不容二妻，就是这个道理。 public cl">
<meta property="og:locale" content="en">
<meta property="og:updated_time" content="2018-09-21T02:06:34.000Z">
<meta name="twitter:card" content="summary">
  
    <link rel="alternate" href="/atom.xml" title="Hexo" type="application/atom+xml">
  
  
    <link rel="icon" href="/favicon.png">
  
  
    <link href="//fonts.googleapis.com/css?family=Source+Code+Pro" rel="stylesheet" type="text/css">
  
  <link rel="stylesheet" href="/css/style.css">
</head>

<body>
  <div id="container">
    <div id="wrap">
      <header id="header">
  <div id="banner"></div>
  <div id="header-outer" class="outer">
    <div id="header-title" class="inner">
      <h1 id="logo-wrap">
        <a href="/" id="logo">Hexo</a>
      </h1>
      
    </div>
    <div id="header-inner" class="inner">
      <nav id="main-nav">
        <a id="main-nav-toggle" class="nav-icon"></a>
        
          <a class="main-nav-link" href="/">Home</a>
        
          <a class="main-nav-link" href="/archives">Archives</a>
        
      </nav>
      <nav id="sub-nav">
        
          <a id="nav-rss-link" class="nav-icon" href="/atom.xml" title="RSS Feed"></a>
        
        <a id="nav-search-btn" class="nav-icon" title="Search"></a>
      </nav>
      <div id="search-form-wrap">
        <form action="//google.com/search" method="get" accept-charset="UTF-8" class="search-form"><input type="search" name="q" class="search-form-input" placeholder="Search"><button type="submit" class="search-form-submit">&#xF002;</button><input type="hidden" name="sitesearch" value="http://huwj.work"></form>
      </div>
    </div>
  </div>
</header>
      <div class="outer">
        <section id="main"><article id="post-单例设计模式" class="article article-type-post" itemscope itemprop="blogPost">
  <div class="article-meta">
    <a href="/java/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F" class="article-date">
  <time datetime="2018-09-21T01:18:00.000Z" itemprop="datePublished">2018-09-21</time>
</a>
    
  <div class="article-category">
    <a class="article-category-link" href="/categories/java/">java</a>
  </div>

  </div>
  <div class="article-inner">
    
    
      <header class="article-header">
        
  
    <h1 class="article-title" itemprop="name">
      单例设计模式
    </h1>
  

      </header>
    
    <div class="article-entry" itemprop="articleBody">
      
        <h2 id="单例设计模式定义"><a href="#单例设计模式定义" class="headerlink" title="单例设计模式定义"></a>单例设计模式定义</h2><p>定义：保证一个类仅有一个实例，并提供一个访问它的全局访问点。<br><br>Java中单例模式定义：“一个类有且仅有一个实例，并且自行实例化向整个系统提供。”<br>通过单例模式可以保证系统中<strong>一个类只有一个实例而且该实例易于外界访问</strong>，从而方便对实例个数的控制并节约系统资源。如果希望在系统中<strong>某个类的对象只能存在一个</strong>，单例模式是最好的解决方案。所谓一山不容二虎，一夫不容二妻，就是这个道理。<br></p>
<pre><code>public class Singleton {
   //1.将构造方法私有化，不允许外部直接创建对象
           private Singleton(){
                           }
       //2.创建类的唯一实例，使用private static修饰
   private static Singleton instance=new Singleton(); 
   //3.提供一个用于获取实例的方法，使用public static修饰
       public static Singleton getInstance(){
           return instance;
                                           }
}</code></pre><p>懒汉式：</p>
<pre><code>public class Singleton2 {

        //1.将构造方式私有化，不允许外边直接创建对象
    private Singleton2(){
                        }

    //2.声明类的唯一实例，使用private static修饰
    private static Singleton2 instance;

    //3.提供一个用于获取实例的方法，使用public static修饰
        public static Singleton2 getInstance(){
            if(instance==null){
                    instance=new Singleton2();
                            }
                            return instance;
                                            }</code></pre><p>}</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre><code>public class Test {
public static void main(String[] args) {

    //饿汉模式
    Singleton s1=Singleton.getInstance();
    Singleton s2=Singleton.getInstance();
    if(s1==s2){
        System.out.println(&quot;s1和s2是同一个实例&quot;);
    }else{
        System.out.println(&quot;s1和s2不是同一个实例&quot;);
    }

    //懒汉模式
    Singleton2 s3=Singleton2.getInstance();
    Singleton2 s4=Singleton2.getInstance();
    if(s3==s4){
        System.out.println(&quot;s3和s4是同一个实例&quot;);
    }else{
        System.out.println(&quot;S3和s4不是同一个实例&quot;);
    }

}
}</code></pre><p>打印结果：<br>s1和s2是同一个实例<br><br>s3和s4是同一个实例</p>
<h2 id="饿汉式VS懒汉式线程："><a href="#饿汉式VS懒汉式线程：" class="headerlink" title="饿汉式VS懒汉式线程："></a>饿汉式VS懒汉式线程：</h2><p>饿汉模式的特点是加载类时比较慢，但运行时获取对象的速度比较快，线程安全<br><br>懒汉模式的特点是加载类时比较快，但运行时获取对象的速度比较慢，线程不安全。<br><br>解决懒汉式线程不安全的方法，在懒汉式中将getInstance方法添加一个关键字synchronized。即优化后的懒汉式单例模式为：</p>
<pre><code>public class Singleton2 {

//1.将构造方式私有化，不允许外边直接创建对象
private Singleton2(){
}

//2.声明类的唯一实例，使用private static修饰
private static Singleton2 instance;

//3.提供一个用于获取实例的方法，使用public static修饰
public synchronized static Singleton2 getInstance(){
    if(instance==null){
        instance=new Singleton2();
    }
    return instance;
}
}</code></pre><p>但是常见的解决线程安全的方式为实行synchronized代码块:<br></p>
<pre><code>public class Singleton2 {

//1.将构造方式私有化，不允许外边直接创建对象
private Singleton2(){
}

//2.声明类的唯一实例，使用private static修饰
private static Singleton2 instance;

//3.提供一个用于获取实例的方法，使用public static修饰
public  static Singleton2 getInstance(){
    if(instance==null){
        synchronized(Single.class){
    if(Single==null)
         instance=new Singleton2();
        }      
    }
    return instance;
}
}</code></pre>
      
    </div>
    <footer class="article-footer">
      <a data-url="http://huwj.work/java/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F" data-id="ck3gl3nu0001mvkez7uzjagsr" class="article-share-link">Share</a>
      
      
    </footer>
  </div>
  
    
<nav id="article-nav">
  
    <a href="/java/static%E5%85%B3%E9%94%AE%E5%AD%97" id="article-nav-newer" class="article-nav-link-wrap">
      <strong class="article-nav-caption">Newer</strong>
      <div class="article-nav-title">
        
          static关键字
        
      </div>
    </a>
  
  
    <a href="/css/css2" id="article-nav-older" class="article-nav-link-wrap">
      <strong class="article-nav-caption">Older</strong>
      <div class="article-nav-title">position跟padding、border</div>
    </a>
  
</nav>

  
</article>

</section>
        
          <aside id="sidebar">
  
    
  <div class="widget-wrap">
    <h3 class="widget-title">Categories</h3>
    <div class="widget">
      <ul class="category-list"><li class="category-list-item"><a class="category-list-link" href="/categories/AR/">AR</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/HTML/">HTML</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/book/">book</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/css/">css</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/java/">java</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/js/">js</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/office/">office</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/python/">python</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/spring/">spring</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/">云计算</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E5%8D%9A%E5%AE%A2/">博客</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E7%82%B9%E6%BB%B4%E7%94%9F%E6%B4%BB/">点滴生活</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/">神经网络</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E7%AE%97%E6%B3%95/">算法</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/">计算机网络</a></li></ul>
    </div>
  </div>


  
    

  
    
  
    
  <div class="widget-wrap">
    <h3 class="widget-title">Archives</h3>
    <div class="widget">
      <ul class="archive-list"><li class="archive-list-item"><a class="archive-list-link" href="/archives/2018/11/">November 2018</a></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2018/10/">October 2018</a></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2018/09/">September 2018</a></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2018/08/">August 2018</a></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2018/07/">July 2018</a></li></ul>
    </div>
  </div>


  
    
  <div class="widget-wrap">
    <h3 class="widget-title">Recent Posts</h3>
    <div class="widget">
      <ul>
        
          <li>
            <a href="/%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD%E5%AD%90%E5%BA%8F%E5%88%97%E4%B9%8B%E5%92%8C">最大连续子序列之和</a>
          </li>
        
          <li>
            <a href="/spring/spring-aop-1">spring_aop_代码实现</a>
          </li>
        
          <li>
            <a href="/spring/spring-aop">spring_aop</a>
          </li>
        
          <li>
            <a href="/spring/spring1">spring_DI</a>
          </li>
        
          <li>
            <a href="/java/leetcode">leetcode</a>
          </li>
        
      </ul>
    </div>
  </div>

  
</aside>
        
      </div>
      <footer id="footer">
  
  <div class="outer">
    <div id="footer-info" class="inner">
      &copy; 2019 John Doe<br>
      Powered by <a href="http://hexo.io/" target="_blank">Hexo</a>
    </div>
  </div>
</footer>
    </div>
    <nav id="mobile-nav">
  
    <a href="/" class="mobile-nav-link">Home</a>
  
    <a href="/archives" class="mobile-nav-link">Archives</a>
  
</nav>
    

<script src="//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>


  <link rel="stylesheet" href="/fancybox/jquery.fancybox.css">
  <script src="/fancybox/jquery.fancybox.pack.js"></script>


<script src="/js/script.js"></script>



  </div>
</body>
</html>
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  

  
  <title>spring_DI | Hexo</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <meta name="description" content="今天学习到了springmvc 发现了，如果不做好笔记的话，真心容易忘的一干二净。还是把好的东西记下来吧，不能嫌弃麻烦，用的时候看一眼就明白了。 spring 依赖注入的三种方式： 1 自动化配置（最推荐，避免显示配置带来的维护成本）（1）组件扫描：spring自动发现容器所创建的bean。开启组件扫描，默认情况下自动扫描配置类相同包（以及子包）下所有带有@component注解的类，并为其自动创">
<meta property="og:type" content="article">
<meta property="og:title" content="spring_DI">
<meta property="og:url" content="http:&#x2F;&#x2F;huwj.work&#x2F;spring&#x2F;spring1">
<meta property="og:site_name" content="Hexo">
<meta property="og:description" content="今天学习到了springmvc 发现了，如果不做好笔记的话，真心容易忘的一干二净。还是把好的东西记下来吧，不能嫌弃麻烦，用的时候看一眼就明白了。 spring 依赖注入的三种方式： 1 自动化配置（最推荐，避免显示配置带来的维护成本）（1）组件扫描：spring自动发现容器所创建的bean。开启组件扫描，默认情况下自动扫描配置类相同包（以及子包）下所有带有@component注解的类，并为其自动创">
<meta property="og:locale" content="en">
<meta property="og:image" content="http:&#x2F;&#x2F;huwj.work&#x2F;images&#x2F;spring&#x2F;three_di&#x2F;1.png">
<meta property="og:image" content="http:&#x2F;&#x2F;huwj.work&#x2F;images&#x2F;spring&#x2F;three_di&#x2F;2.png">
<meta property="og:image" content="http:&#x2F;&#x2F;huwj.work&#x2F;images&#x2F;spring&#x2F;three_di&#x2F;3.png">
<meta property="og:image" content="http:&#x2F;&#x2F;huwj.work&#x2F;images&#x2F;spring&#x2F;three_di&#x2F;4.png">
<meta property="og:updated_time" content="2018-11-29T12:32:12.000Z">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="http:&#x2F;&#x2F;huwj.work&#x2F;images&#x2F;spring&#x2F;three_di&#x2F;1.png">
  
    <link rel="alternate" href="/atom.xml" title="Hexo" type="application/atom+xml">
  
  
    <link rel="icon" href="/favicon.png">
  
  
    <link href="//fonts.googleapis.com/css?family=Source+Code+Pro" rel="stylesheet" type="text/css">
  
  <link rel="stylesheet" href="/css/style.css">
</head>

<body>
  <div id="container">
    <div id="wrap">
      <header id="header">
  <div id="banner"></div>
  <div id="header-outer" class="outer">
    <div id="header-title" class="inner">
      <h1 id="logo-wrap">
        <a href="/" id="logo">Hexo</a>
      </h1>
      
    </div>
    <div id="header-inner" class="inner">
      <nav id="main-nav">
        <a id="main-nav-toggle" class="nav-icon"></a>
        
          <a class="main-nav-link" href="/">Home</a>
        
          <a class="main-nav-link" href="/archives">Archives</a>
        
      </nav>
      <nav id="sub-nav">
        
          <a id="nav-rss-link" class="nav-icon" href="/atom.xml" title="RSS Feed"></a>
        
        <a id="nav-search-btn" class="nav-icon" title="Search"></a>
      </nav>
      <div id="search-form-wrap">
        <form action="//google.com/search" method="get" accept-charset="UTF-8" class="search-form"><input type="search" name="q" class="search-form-input" placeholder="Search"><button type="submit" class="search-form-submit">&#xF002;</button><input type="hidden" name="sitesearch" value="http://huwj.work"></form>
      </div>
    </div>
  </div>
</header>
      <div class="outer">
        <section id="main"><article id="post-spring1" class="article article-type-post" itemscope itemprop="blogPost">
  <div class="article-meta">
    <a href="/spring/spring1" class="article-date">
  <time datetime="2018-11-17T02:07:02.000Z" itemprop="datePublished">2018-11-17</time>
</a>
    
  <div class="article-category">
    <a class="article-category-link" href="/categories/spring/">spring</a>
  </div>

  </div>
  <div class="article-inner">
    
    
      <header class="article-header">
        
  
    <h1 class="article-title" itemprop="name">
      spring_DI
    </h1>
  

      </header>
    
    <div class="article-entry" itemprop="articleBody">
      
        <p>今天学习到了springmvc 发现了，如果不做好笔记的话，真心容易忘的一干二净。还是把好的东西记下来吧，不能嫌弃麻烦，用的时候看一眼就明白了。</p>
<p>spring 依赖注入的三种方式：</p>
<h2 id="1-自动化配置（最推荐，避免显示配置带来的维护成本）"><a href="#1-自动化配置（最推荐，避免显示配置带来的维护成本）" class="headerlink" title="1 自动化配置（最推荐，避免显示配置带来的维护成本）"></a>1 自动化配置（最推荐，避免显示配置带来的维护成本）</h2><p><strong>（1）组件扫描</strong>：spring自动发现容器所创建的bean。开启组件扫描，默认情况下自动扫描配置类相同包（以及子包）下所有带有@component注解的类，并为其自动创建一个bean。</p>
<pre><code>@ComponentScan(basePackages={&quot;com.seven.springTest.service&quot;,&quot;com.seven.springTest.impl&quot;})</code></pre><p><strong>那么，如何开启组件扫描呢？答：有两种方式，基于java配置(推荐)和xml配置</strong></p>
<p>Java配置：在配置类上添加@componentScan注解</p>
<p>Xml配置：利用&lt;context:component-scan base-package=”…”/&gt;</p>
<p><strong>（2）自动装配</strong>：spring自动满足bean之间的依赖。使用@Autowired（推荐）或@Inject注解添加在构造、setter还是其他方法上，实现bean的自动注入，无需手动去new。</p>
<p><img src="/images/spring/three_di/1.png" alt="Alt text"><br>其中红线为扫描组件，黑线为自动装配。</p>
<h2 id="2-Java配置（推荐，基于java语言，类型安全易于重构）"><a href="#2-Java配置（推荐，基于java语言，类型安全易于重构）" class="headerlink" title="2 Java配置（推荐，基于java语言，类型安全易于重构）"></a>2 Java配置（推荐，基于java语言，类型安全易于重构）</h2><p>利用@Bean注解来声明（创建）一个bean(其实将方式一中的扫描组件以及自动装配方式用@Bean的形式进行取代)，同时还可以注入另外依赖的bean（利用构造器和setter方法）</p>
<pre><code>@Configuration
//@ComponentScan   将启用组件扫描的注解给注释掉，另外需要自己new对象
public class HelloWorldConfig {
    @Bean
    public TVTool tvtool() {
         return new TVTool();
     }
    @Bean
     public IphoneTool iphonetool() {
         return new IphoneTool();
     }
    @Bean//这里是重点，将上面new对象的方法 ，全部以构造器或者是setter的形式传入到其它类中，这里是 PersonHelloWorld类
     public PersonHelloWorld personhelloworld(){
         return new PersonHelloWorld(tvtool(),iphonetool());
     } 
   //下面是构造方法加载bean，说实话，不如直接构造器方便
    @Bean
 public PersonHelloWorld personhelloworld(IphoneTool iphoneTool){
    PersonHelloWorld ll=new PersonHelloWorld(tvtool());
    ll.setIphoneTool(iphoneTool);
    return ll;
 } 
}</code></pre><p>PersonHelloWorld 类中需要有构造方法：</p>
<pre><code>public class PersonHelloWorld implements HelloWorldApi {
    private TVTool tv;
    private IphoneTool iphone;
   public PersonHelloWorld(TVTool tvtool, IphoneTool iphoneTool) {
      this.tv=tvtool;
      this.iphone=iphoneTool;
   }
@Override
    public void sayHello() {
        tv.work();
        iphone.work();
    }
}</code></pre><p><img src="/images/spring/three_di/2.png" alt="Alt text"></p>
<p>其实，这里就是跟传统java的思想很像了，采用@Bean的方式new出java对象，然后使用构造器或者set方式将对象加载到替他的类中。</p>
<h2 id="3-xml配制方法"><a href="#3-xml配制方法" class="headerlink" title="3 xml配制方法"></a>3 xml配制方法</h2><p>xml的方式特别简单了，我最服气的也是这第三种装配方式，没有配置类，直接在web.xml中进行配置各种bean以及初始化数据。<br><img src="/images/spring/three_di/3.png" alt="Alt text"></p>
<pre><code> &lt;bean id=&quot;iphonetool&quot; class=&quot;com.IphoneTool&quot; /&gt;//加载IphoneTool bean
&lt;bean id=&quot;tvtool&quot; class=&quot;com.TvTool&quot; /&gt;//加载TvTool bean
&lt;bean id=&quot;personhelloworld&quot; class=&quot;com.PersonHelloWorld&quot; &gt;//IphoneTool跟TvTool都需要注入到PersonHelloWorld
 &lt;constructor-arg ref=&quot;iphonetool&quot; /&gt;//构造器注入，对应代码如下面
 &lt;property name=&quot;tvTool&quot; ref=&quot;tvtool&quot; /&gt;//seter方式注入，对应代码如下面
 &lt;property name=&quot;artist&quot; value=&quot;xml style&quot; /&gt;//参数注入，代码在下面
&lt;/bean&gt;</code></pre><p>稍微讲解一下，其实就相当于将第二种方式的配置@    Bean模式改为xml进行配置。</p>
<pre><code>&lt;bean id=&quot;iphonetool&quot; class=&quot;com.IphoneTool&quot; /&gt;</code></pre><p>然后通过构造器以及setter等方法进行注入</p>
<pre><code>&lt;constructor-arg ref=&quot;iphonetool&quot; /&gt;//构造器注入</code></pre><p>class后面就是需要加载的bean，前面的id随意，在生成bean之后，就可以通过构造器或者是set方式将bean加载到对应的地方：</p>
<pre><code>public PersonHelloWorld(IphoneTool iphoneTool) {
      this.iphone=iphoneTool;
   }
   public void settvTool(TvTool l) {
       this.tv=l;
   public void setArtist(String artist) {
       this.str=artist;
   }</code></pre><p>*<em>在注入时，名字跟id一定要注意  *</em></p>
<p><img src="/images/spring/three_di/4.png" alt="Alt text"></p>

      
    </div>
    <footer class="article-footer">
      <a data-url="http://huwj.work/spring/spring1" data-id="ck3gl3nt40017vkeze095020v" class="article-share-link">Share</a>
      
      
    </footer>
  </div>
  
    
<nav id="article-nav">
  
    <a href="/spring/spring-aop" id="article-nav-newer" class="article-nav-link-wrap">
      <strong class="article-nav-caption">Newer</strong>
      <div class="article-nav-title">
        
          spring_aop
        
      </div>
    </a>
  
  
    <a href="/java/leetcode" id="article-nav-older" class="article-nav-link-wrap">
      <strong class="article-nav-caption">Older</strong>
      <div class="article-nav-title">leetcode</div>
    </a>
  
</nav>

  
</article>

</section>
        
          <aside id="sidebar">
  
    
  <div class="widget-wrap">
    <h3 class="widget-title">Categories</h3>
    <div class="widget">
      <ul class="category-list"><li class="category-list-item"><a class="category-list-link" href="/categories/AR/">AR</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/HTML/">HTML</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/book/">book</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/css/">css</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/java/">java</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/js/">js</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/office/">office</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/python/">python</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/spring/">spring</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/">云计算</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E5%8D%9A%E5%AE%A2/">博客</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E7%82%B9%E6%BB%B4%E7%94%9F%E6%B4%BB/">点滴生活</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/">神经网络</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E7%AE%97%E6%B3%95/">算法</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/">计算机网络</a></li></ul>
    </div>
  </div>


  
    

  
    
  
    
  <div class="widget-wrap">
    <h3 class="widget-title">Archives</h3>
    <div class="widget">
      <ul class="archive-list"><li class="archive-list-item"><a class="archive-list-link" href="/archives/2018/11/">November 2018</a></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2018/10/">October 2018</a></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2018/09/">September 2018</a></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2018/08/">August 2018</a></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2018/07/">July 2018</a></li></ul>
    </div>
  </div>


  
    
  <div class="widget-wrap">
    <h3 class="widget-title">Recent Posts</h3>
    <div class="widget">
      <ul>
        
          <li>
            <a href="/%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD%E5%AD%90%E5%BA%8F%E5%88%97%E4%B9%8B%E5%92%8C">最大连续子序列之和</a>
          </li>
        
          <li>
            <a href="/spring/spring-aop-1">spring_aop_代码实现</a>
          </li>
        
          <li>
            <a href="/spring/spring-aop">spring_aop</a>
          </li>
        
          <li>
            <a href="/spring/spring1">spring_DI</a>
          </li>
        
          <li>
            <a href="/java/leetcode">leetcode</a>
          </li>
        
      </ul>
    </div>
  </div>

  
</aside>
        
      </div>
      <footer id="footer">
  
  <div class="outer">
    <div id="footer-info" class="inner">
      &copy; 2019 John Doe<br>
      Powered by <a href="http://hexo.io/" target="_blank">Hexo</a>
    </div>
  </div>
</footer>
    </div>
    <nav id="mobile-nav">
  
    <a href="/" class="mobile-nav-link">Home</a>
  
    <a href="/archives" class="mobile-nav-link">Archives</a>
  
</nav>
    

<script src="//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>


  <link rel="stylesheet" href="/fancybox/jquery.fancybox.css">
  <script src="/fancybox/jquery.fancybox.pack.js"></script>


<script src="/js/script.js"></script>



  </div>
</body>
</html>